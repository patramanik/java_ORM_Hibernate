
package com.demo.entity.dao;

import java.util.List;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.hibernate.cfg.Configuration;
import org.hibernate.query.Query;
import com.demo.entity.Product;

public class ProductDaoImpl implements ProductDao {

    Session s;

    public ProductDaoImpl() {
        try {
            Configuration cfg = new Configuration();

            // Programmatic configuration
            cfg.setProperty("hibernate.connection.driver_class", "com.mysql.cj.jdbc.Driver");
            cfg.setProperty("hibernate.connection.url", 
                "jdbc:mysql://localhost:3307/hdp?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC");
            cfg.setProperty("hibernate.connection.username", "root");
            cfg.setProperty("hibernate.connection.password", "root");
            cfg.setProperty("hibernate.dialect", "org.hibernate.dialect.MySQLDialect"); // Add dialect

            // Build SessionFactory and open session
            SessionFactory sf = cfg.buildSessionFactory();
            s = sf.openSession();

        } catch (Exception e) {
            e.printStackTrace();
            throw new RuntimeException("Failed to initialize Hibernate Session", e);
        }
    }

    @Override
    public void insertProduct(Product p) {
        Transaction t = s.beginTransaction();
        s.save(p);
        t.commit();
    }

    @Override
    public List<Product> desplayAllProduct() {
        Transaction t = s.beginTransaction();
        Query<Product> query = s.createQuery("FROM Product", Product.class);
        List<Product> list = query.getResultList();
        t.commit(); // Commit transaction after query
        return list;
    }

    @Override
    public void editProduct(Product p) {
        Transaction t = s.beginTransaction();
        s.update(p);
        t.commit();
        System.out.println("Product Updated");
    }

    @Override
    public void deleteProduct(int id) {
        Transaction t = s.beginTransaction();
        Product p = s.get(Product.class, id);
        if (p != null) {
            s.delete(p);
        }
        t.commit();
    }
}















//package com.demo.entity.dao;
//
//import java.util.List;
////
////import org.hibernate.Query;
////import org.hibernate.Session;
////import org.hibernate.SessionFactory;
////import org.hibernate.Transaction;
////import org.hibernate.cfg.Configuration;
//
//import org.hibernate.Session;
//import org.hibernate.SessionFactory;
//import org.hibernate.Transaction;
//import org.hibernate.cfg.Configuration;
//import org.hibernate.query.Query;
//
//import com.demo.entity.Product;
//
//public class ProductDaoImpl implements ProductDao{
//	
//	Session s;
//
//	public ProductDaoImpl() {
//		
//		Configuration cfg = new Configuration();
////		cfg.configure("hibernate.cfg.xml");
////		SessionFactory sf = cfg.buildSessionFactory();
////		s = sf.openSession();
//		
//        // Programmatic configuration (overrides hibernate.cfg.xml)
//        cfg.setProperty("hibernate.connection.driver_class", "com.mysql.cj.jdbc.Driver");
//        cfg.setProperty("hibernate.connection.url", 
//            "jdbc:mysql://localhost:3307/hdp?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC");
//        cfg.setProperty("hibernate.connection.username", "root");
//        cfg.setProperty("hibernate.connection.password", "root");
//		
//	}
//
//	@Override
//	public void insertProduct(Product p) {
//		
//		Transaction t = s.beginTransaction();
//		
//		s.save(p);
//		
//		t.commit();
//	
//		
//	}
//
//	@Override
//	public List<Product> desplayAllProduct() {
//		
//		Transaction t =s.beginTransaction();
//		
//		Query query = s.createQuery("from Product");
//		List<Product> list = query.list();
//		
//		return list;
//	}
//
//	@Override
//	public void editProduct(Product p) {
//		Transaction t = s.beginTransaction();
//		
//		s.update(p);
//		
////		 Query query = s.createQuery("UPDATE Product p SET p.name=:newName,p.category=:newCategory,p.price=:newPrice,p.quantity=:newQuantity WHERE p.id=:id");
//		
////		query.setParameter("id", p.getId());
////		query.setParameter("newName", p.getName());
////		query.setParameter("newCategory", p.getCategory());
////		query.setParameter("newPrice", p.getPrice());
////		query.setParameter("newQuantity", p.getQuantity());
////		
////		int result = query.executeUpdate();
//		System.out.println("Product Updated");
//	}
//
//	@Override
//	public void deleteProduct(int id) {
//		// TODO Auto-generated method stub
//		
//	}
//
//	//@Override
////	public void deleteProduct(int id) {
////		Transaction t = s.beginTransaction();
////		
////		 Query = s.createQuery("DELETE FROM Product p WHERE p.id =:id");
////		
////		query.setParameter("id", id);
////		
////		int result = query.executeUpdate();
////		System.out.println("Rows affected: " + result);
////		
////	}
//
//}
